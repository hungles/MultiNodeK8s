- name: Enable the kubelet service
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes

- name: Start the kubelet service
  ansible.builtin.systemd:
    name: kubelet
    state: started

- name: Run swapoff -a
  command: swapoff -a

- name: Get Host IP
  shell: ip -4 addr show {{ ansible_default_ipv4.interface }} | grep -oP '(?<=inet\s)\d+(\.\d+){3}'
  register: host_ip_cmd
  when: is_first_master

- name: Save IP in variable
  set_fact:
    host_ip: "{{ host_ip_cmd.stdout }}"
  when: is_first_master

- name: Create configuration file from template
  ansible.builtin.template:
    src: kubeadm-config.j2
    dest: "/home/{{ ansible_user_id }}/kubeadm-config.yml"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0644'
  when: is_first_master

- name: Run kubeadm init only on the first node
  shell: |
    kubeadm init --config /home/{{ ansible_user_id }}/kubeadm-config.yml
  when: is_first_master
  register: kubeadm_output

- name: Show output of kubeadm init
  debug:
    var: kubeadm_output.stdout_lines
  when: is_first_master

- name: Create a .kube directory in the current user's home page
  file:
    path: "/home/{{ ansible_user_id }}/.kube"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: 0755
  when: is_first_master

- name: Copy the admin.conf to ~/.kube/config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user_id }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: 0600
  when: is_first_master

- name: Wait 30 seconds before continuing
  pause:
    seconds: 30
  when: is_first_master

- name: Run the kubeadm command and filter the output with grep
  shell: |
    kubeadm init phase upload-certs --upload-certs 2>&1 | grep -P '^[a-fA-F0-9]{64}$'
  register: kube_cert
  changed_when: false
  when: is_first_master

- name: Save the result as an accessible fact
  set_fact:
    cert_key: "{{ kube_cert.stdout }}"
  when: is_first_master

- name: Apply Calico as CNI plugin
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
  become_user: "{{ ansible_user_id }}"
  when: is_first_master

- name: Wait 30 seconds for Calico Pods
  pause:
    seconds: 30
  when: is_first_master
    
- name: Generate join token on the first master
  shell: kubeadm token create --print-join-command
  register: join_command_raw
  when: is_first_master

- name: Get the join_command
  set_fact:
    join_command: "{{ join_command_raw.stdout }}"
  when: is_first_master

- name: Join secondary master nodes to the cluster
  shell: "{{ hostvars[groups['k8-masters'][0]].join_command }} --control-plane --certificate-key {{ hostvars[groups['k8-masters'][0]].cert_key }}"
  when: not is_first_master

- name: Create a .kube directory in the current user's home page in other masters
  file:
    path: "/home/{{ ansible_user_id }}/.kube"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: 0755
  when: not is_first_master

- name: Copy the admin.conf to ~/.kube/config in other masters
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user_id }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: 0600
  when: not is_first_master